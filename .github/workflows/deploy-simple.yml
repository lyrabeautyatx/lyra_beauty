name: Deploy to AWS EC2 (Simple)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1
        
    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
        HOSTNAME: ${{ secrets.EC2_HOST }}
      run: |
        # Install SSH client
        sudo apt-get update
        sudo apt-get install -y openssh-client rsync
        
        # Setup SSH with explicit key format
        mkdir -p ~/.ssh
        
        # Write the key and fix any format issues
        echo "$PRIVATE_KEY" | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
        
        # Fix permissions
        chmod 600 ~/.ssh/id_rsa
        chmod 700 ~/.ssh
        
        # Disable strict host checking for this deployment
        echo "StrictHostKeyChecking no" >> ~/.ssh/config
        echo "UserKnownHostsFile /dev/null" >> ~/.ssh/config
        
        # Test SSH connection with timeout
        timeout 10 ssh -i ~/.ssh/id_rsa ec2-user@$HOSTNAME "echo 'SSH connection successful'" || {
          echo "‚ùå SSH connection failed!"
          echo "Debugging SSH key..."
          echo "Key file size: $(wc -c ~/.ssh/id_rsa)"
          echo "Key file starts with:"
          head -n 2 ~/.ssh/id_rsa
          echo "Key file ends with:"
          tail -n 2 ~/.ssh/id_rsa
          exit 1
        }
        
        # Create clean deployment package
        echo "üì¶ Creating deployment package..."
        
        # Copy project files excluding node_modules and .git
        rsync -av \
          --exclude='node_modules' \
          --exclude='.git' \
          --exclude='.github' \
          --exclude='*.pem' \
          ./ deployment/
        
        # Create tarball
        cd deployment
        tar -czf ../lyra-beauty.tar.gz .
        cd ..
        
        echo "‚úÖ Package created: $(ls -lh lyra-beauty.tar.gz)"
        
        # Deploy to EC2
        echo "üöÄ Deploying to EC2..."
        
        # Copy file to server
        scp -i ~/.ssh/id_rsa lyra-beauty.tar.gz ec2-user@$HOSTNAME:/tmp/
        
        # Execute deployment commands
        ssh -i ~/.ssh/id_rsa ec2-user@$HOSTNAME << 'DEPLOY_SCRIPT'
          set -e
          
          echo "üìÅ Preparing deployment directory..."
          cd /opt/lyra-beauty
          
          # Backup current version
          if [ -f package.json ]; then
            echo "üíæ Creating backup..."
            tar -czf "backup-$(date +%Y%m%d-%H%M%S).tar.gz" . --exclude='backup-*.tar.gz' || true
          fi
          
          # Extract new version
          echo "üì§ Extracting new version..."
          tar -xzf /tmp/lyra-beauty.tar.gz
          rm /tmp/lyra-beauty.tar.gz
          
          # Install dependencies
          echo "üì¶ Installing dependencies..."
          npm install --production
          
          # Create/update environment file
          echo "‚öôÔ∏è  Setting up environment..."
          cat > .env << EOF
NODE_ENV=production
PORT=3000
SESSION_SECRET=lyra_beauty_$(date +%s)
EOF
          
          # Create logs directory
          mkdir -p logs
          
          # Stop and start application with PM2
          echo "üîÑ Restarting application..."
          pm2 stop lyra-beauty || echo "App not running"
          pm2 delete lyra-beauty || echo "App not in PM2"
          pm2 start ecosystem.config.js
          pm2 save
          
          echo "‚úÖ Deployment completed successfully!"
          echo "üåê Application is running on http://$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4):80"
DEPLOY_SCRIPT
        
        echo "üéâ Deployment finished!"
        
    - name: Deployment Status
      run: |
        echo "üöÄ Deployment completed!"
        echo "üåê Application URL: http://lyrabeautyatx.com"
        echo "üåê Alternative URL: http://${{ secrets.EC2_HOST }}"
        echo "üìä Check application status at: http://lyrabeautyatx.com/dashboard"
