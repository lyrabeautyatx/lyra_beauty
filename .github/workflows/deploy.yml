---
name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOSTNAME: ${{ secrets.EC2_HOST }}
          # Application Environment Variables
          NODE_ENV: ${{ secrets.NODE_ENV }}
          PORT: ${{ secrets.PORT }}
          SESSION_SECRET: ${{ secrets.SESSION_SECRET }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          # Google OAuth Configuration
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          # Square API Configuration
          SQUARE_ACCESS_TOKEN: ${{ secrets.SQUARE_ACCESS_TOKEN_DEV }}
          SQUARE_APPLICATION_ID: ${{ secrets.SQUARE_APPLICATION_ID_DEV }}
          SQUARE_LOCATION_ID: ${{ secrets.SQUARE_LOCATION_ID_DEV }}
          SQUARE_WEBHOOK_SIGNATURE_KEY: ${{ secrets.SQUARE_WEBHOOK_SIGNATURE_KEY_DEV }}
          SQUARE_ENVIRONMENT: sandbox
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$PRIVATE_KEY" | sed 's/\\n/\n/g' > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          chmod 700 ~/.ssh

          # Configure SSH client
          cat >> ~/.ssh/config << EOF
          Host production
              HostName $HOSTNAME
              User ec2-user
              IdentityFile ~/.ssh/id_rsa
              StrictHostKeyChecking no
              UserKnownHostsFile /dev/null
          EOF

          # Test SSH connection
          echo "🔌 Testing connection to production server..."
          ssh production "echo 'Connection successful'" || {
            echo "❌ SSH connection failed!"
            exit 1
          }

          # Create deployment package
          echo "📦 Creating deployment package..."
          mkdir deployment

          # Copy application files (exclude development/build artifacts)
          rsync -av \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='*.pem' \
            --exclude='*.log' \
            --exclude='deployment' \
            --exclude='.env' \
            ./ deployment/

          # Create compressed archive
          cd deployment
          tar -czf ../lyra-beauty-deploy.tar.gz .
          cd ..

          echo "✅ Package created: $(ls -lh lyra-beauty-deploy.tar.gz)"

          # Deploy to production server
          echo "🚀 Deploying to production server..."

          # Upload deployment package
          scp lyra-beauty-deploy.tar.gz production:/tmp/

          # Execute deployment on server with environment variables
          ssh production << DEPLOY_SCRIPT
          set -e

          echo "📁 Setting up deployment environment..."

          # Ensure application directory exists
          sudo mkdir -p /opt/lyra-beauty
          sudo chown ec2-user:ec2-user /opt/lyra-beauty
          cd /opt/lyra-beauty

          # Check and update Node.js version if needed
          echo "🔍 Checking Node.js version..."
          current_node_version=\$(node --version | cut -d'v' -f2)
          required_version="18.0.0"
          
          if [ "\$(printf '%s\n' "\$required_version" "\$current_node_version" | sort -V | head -n1)" = "\$required_version" ]; then
            echo "✅ Node.js version \$current_node_version is compatible"
          else
            echo "⚠️  Node.js version \$current_node_version detected, application requires >=18.0.0"
            echo "📦 The application will still work but consider updating Node.js"
          fi

          # Create backup of current version
          if [ -f package.json ]; then
            echo "💾 Creating backup of current version..."
            tar -czf "backup-\$(date +%Y%m%d-%H%M%S).tar.gz" \
              --exclude='backup-*.tar.gz' \
              --exclude='node_modules' \
              --exclude='logs/*.log' \
              . || echo "Backup creation failed, continuing..."
          fi

          # Extract new version
          echo "📤 Extracting new application version..."
          tar -xzf /tmp/lyra-beauty-deploy.tar.gz
          rm /tmp/lyra-beauty-deploy.tar.gz

          # Install production dependencies
          echo "📦 Installing production dependencies..."
          npm install --only=production --no-audit

          # Setup environment with GitHub secrets
          echo "⚙️ Configuring production environment..."
          cat > .env << EOF
          # Production Environment Configuration
          NODE_ENV=$NODE_ENV
          PORT=$PORT
          
          # Security Configuration
          SESSION_SECRET=$SESSION_SECRET
          JWT_SECRET=$JWT_SECRET
          
          # Google OAuth Configuration
          GOOGLE_CLIENT_ID=$GOOGLE_CLIENT_ID
          GOOGLE_CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
          
          # Square API Configuration (Sandbox for testing)
          SQUARE_ACCESS_TOKEN=$SQUARE_ACCESS_TOKEN
          SQUARE_APPLICATION_ID=$SQUARE_APPLICATION_ID
          SQUARE_LOCATION_ID=$SQUARE_LOCATION_ID
          SQUARE_WEBHOOK_SIGNATURE_KEY=$SQUARE_WEBHOOK_SIGNATURE_KEY
          SQUARE_ENVIRONMENT=sandbox
          
          # Database Configuration
          DATABASE_PATH=./lyra_beauty.db
          
          # AWS S3 Backup Configuration (Optional)
          AWS_S3_BACKUP_BUCKET=lyra-beauty-backups
          EOF
          
          # Secure the .env file
          chmod 600 .env
          echo "✅ Environment variables configured securely"

          # Validate environment configuration
          echo "🔍 Validating environment configuration..."
          if [ -f .env ]; then
            echo "✅ .env file created"
            echo "📝 Environment variables configured:"
            echo "   - NODE_ENV: \$(grep NODE_ENV .env | cut -d'=' -f2)"
            echo "   - PORT: \$(grep PORT .env | cut -d'=' -f2)"
            echo "   - GOOGLE_CLIENT_ID: \$(grep GOOGLE_CLIENT_ID .env | cut -d'=' -f2 | head -c 20)..."
            echo "   - SQUARE_ENVIRONMENT: \$(grep SQUARE_ENVIRONMENT .env | cut -d'=' -f2)"
          else
            echo "❌ .env file not found!"
            exit 1
          fi

          # Ensure logs directory exists
          mkdir -p logs

          # Verify environment configuration before starting
          echo "🔍 Verifying environment configuration..."
          if [ -f scripts/verify-environment.js ]; then
            node scripts/verify-environment.js
            if [ \$? -ne 0 ]; then
              echo "❌ Environment verification failed!"
              exit 1
            fi
          else
            echo "⚠️  Environment verification script not found, skipping..."
          fi

          # Restart application using PM2 ecosystem
          echo "🔄 Restarting application with PM2..."

          # Stop existing application gracefully
          pm2 stop lyra-beauty 2>/dev/null || echo "App not running"
          pm2 delete lyra-beauty 2>/dev/null || echo "App not in PM2"

          # Start application using ecosystem configuration
          pm2 start ecosystem.config.js

          # Save PM2 configuration
          pm2 save

          # Verify application is running
          sleep 5
          if pm2 list | grep -q "lyra-beauty.*online"; then
            echo "✅ Application started successfully!"
          else
            echo "❌ Application failed to start!"
            pm2 logs lyra-beauty --lines 20
            exit 1
          fi

          echo "🎉 Deployment completed successfully!"
          public_ip=\$(curl -s http://169.254.169.254/latest/meta-data/public-ipv4)
          echo "🌐 Application is available at: http://\$public_ip"
          DEPLOY_SCRIPT

          echo "🎊 Deployment finished successfully!"

      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f lyra-beauty-deploy.tar.gz
          rm -rf deployment

      - name: Deployment Summary
        run: |
          echo "🚀 Deployment Summary"
          echo "====================="
          echo "✅ Code deployed from main branch"
          echo "✅ Dependencies installed"
          echo "✅ Application started with PM2"
          echo "✅ Environment configured for production"
          echo ""
          echo "🌐 Application URLs:"
          echo "   Primary: http://lyrabeautyatx.com"
          echo "   Direct:  http://${{ secrets.EC2_HOST }}"
